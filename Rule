/**
 *  Rule
 *
 *  Copyright 2015 Bruce Ravenel
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Rule",
    namespace: "bravenel",
    author: "Bruce Ravenel",
    description: "Rule Routines",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
    page(name: "selectRule")
	page(name: "selectConditions")
    page(name: "certainTime")
    page(name: "defineRule")
}

def selectRule() {
	dynamicPage(name: "selectRule", title: "Select Conditions, Rule and Routines", uninstall: true, install: true) {
    	
		section() {     
			label title: "Name the Rule", required: true
			def condLabel = conditionLabel()
			href "selectConditions", title: "Select Conditions", description: condLabel ?: "Tap to set", required: true, state: condLabel ? "complete" : null
			href "defineRule", title: "Define the Rule", description: state.str ? state.str + "\n\n$state.eval": "Tap to set", state: state.str ? "complete" : null
            def phrases = location.helloHome?.getPhrases()*.label
            input "myPhraseTrue", "enum", title: "Routine to run when true", required: false, options: phrases.sort()
            input "myPhraseFalse", "enum", title: "Routine to run when false", required: false, options: phrases.sort()
		}
    }
}

def getDevs(myCapab, dev) {
    def thisName = ""
    def thisCapab = ""
	switch(myCapab) {
		case "Switch":
			thisName = "Switches"
            thisCapab = "switch"
			break
		case "Motion":
			thisName = "Motion sensors"
            thisCapab = "motionSensor"
			break
        case "Acceleration":
			thisName = "Acceleration sensors"
            thisCapab = "accelerationSensor"
			break        
		case "Contact":
			thisName = "Contact sensors"
            thisCapab = "contactSensor"
			break
		case "Presence":
			thisName = "Presence sensors"
            thisCapab = "presenceSensor"
			break
		case "Lock":
			thisName = "Locks"
            thisCapab = "lock"
            break
        case "Temperature":
        	thisName = "Temperature sensors"
        	thisCapab = "temperatureMeasurement"
            break
        case "Humidity":
        	thisName = "Humidity sensors"
        	thisCapab = "relativeHumidityMeasurement"
            break
        case "Illuminance":
        	thisName = "Illuminance sensors"
            thisCapab = "illuminanceMeasurement"
	}
	def result = input dev, "capability.$thisCapab", title: thisName, required: true, multiple: true, submitOnChange: true
}

def getAnyAll(myDev) {
    def result = input "All$myDev", "bool", title: "All of these?", defaultValue: false
}

def getRelational(myDev) {
	def result = input "Rel$myDev", "enum", title: "Choose comparison", required: true, options: ["=", "!=", "<", ">", "<=", ">="]
}

def getCapab(myCapab) {
	def myOptions = ["Switch", "Motion", "Acceleration", "Contact", "Presence", "Lock", "Temperature", "Humidity", "Illuminance", "Time of day", "Days of week", "Mode"]
	def result = input myCapab, "enum", title: "Select capability", required: true, options: myOptions.sort(), submitOnChange: true
}

def getState(myCapab, n) {
	def result = null
	switch(myCapab) {
		case "Switch":
			result = input "state$n", "enum", title: "Switch state", options: ["on", "off"]
			return
		case "Motion":
			result = input "state$n", "enum", title: "Motion state", options: ["active", "inactive"]
			return
		case "Acceleration":
			result = input "state$n", "enum", title: "Acceleration state", options: ["active", "inactive"]
			return
		case "Contact":
			result = input "state$n", "enum", title: "Contact state", options: ["open", "closed"]
			return
		case "Presence":
			result = input "state$n", "enum", title: "Presence state", options: ["present", "not present"]
			return
		case "Lock":
			result = input "state$n", "enum", title: "Lock state", options: ["locked", "unlocked"]
			return
        case "Temperature":
        	result = input "state$n", "number", title: "Temperature"
            return
        case "Humidity":
        	result = input "state$n", "number", title: "Humidity"
            return
        case "Illuminance":
        	result = input "state$n", "number", title: "Illuminance"
            return
        case "Time of day":
        	def timeLabel = timeIntervalLabel()
			href "certainTime", title: "During a certain time", description: timeLabel ?: "Tap to set", state: timeLabel ? "complete" : null
			return
        case "Days of week":
        	result = input "days", "enum", title: "On certain days of the week", multiple: true, required: false,
				options: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
			return
		case "Mode":
        	result = input "modes", "mode", title: "When mode is", multiple: true, required: false
            return
	}
}

def selectConditions() {
	dynamicPage(name: "selectConditions", title: "Select Conditions", uninstall: false) {
		section("") {input "howMany", "number", title: "How many conditions?", required: true, submitOnChange: true}
        if(howMany) {
			for (int i = 1; i <= howMany; i++) {
				def thisCapab = "rCapab$i"
            	section("Condtion #$i") {
                    getCapab(thisCapab)
                	def myCapab = settings.find {it.key == thisCapab}
                	if(myCapab) {
                		def xCapab = myCapab.value
						if(!(xCapab in ["Time of day", "Days of week", "Mode"])) {
                    		def thisDev = "rDev$i"
                    		getDevs(xCapab, thisDev)
                            def myDev = settings.find {it.key == thisDev}
                            if(myDev) {
                            	if(myDev.value.size() > 1) getAnyAll(thisDev)
                            }
                            if(xCapab in ["Temperature", "Humidity", "Illuminance"]) getRelational(thisDev)
                        }
                        getState(xCapab, i)
                    }
                }
			}
        }
	}
}

def inputLeft() {
	def conds = []
    for (int i = 1; i <= howMany; i++) conds << conditionLabelN(i)
    input "subCondL$state.n", "bool", title: "Enter sub rule for left?", submitOnChange: true
    if(settings["subCondL$state.n"]) inputLeftAndRight(true)
    else {
    	input "condL$state.n", "enum", title: "Which condition?", options: conds, submitOnChange: true
        if(settings["condL$state.n"]) {
            state.str = state.str + settings["condL$state.n"]
            state.eval << i
            paragraph(state.str)
        }
    }
}

def inputRight() {
	state.n = state.n + 1
    input "operator$state.n", "enum", title: "Choose: AND,  OR,  Done", options: ["AND", "OR", "Done"], submitOnChange: true
    if(settings["operator$state.n"]) if(settings["operator$state.n"] != "Done") {
    	state.str = state.str + " " + settings["operator$state.n"] + " "
        state.eval << settings["operator$state.n"]
        paragraph(state.str)
		def conds = []
    	for (int i = 1; i <= howMany; i++) conds << conditionLabelN(i)
    	input "subCondR$state.n", "bool", title: "Enter sub rule for right?", submitOnChange: true
    	if(settings["subCondR$state.n"]) inputLeftAndRight(true)
    	else {
			input "condR$state.n", "enum", title: "Which condition?", options: conds, submitOnChange: true
        	if(settings["condR$state.n"]) {
            	state.str = state.str + settings["condR$state.n"]
                state.eval << i
            	paragraph(state.str)
            }
			input "moreConds$state.n", "bool", title: "More conditions?", submitOnChange: true
    		if(settings["moreConds$state.n"]) inputRight()
        }
    } 
}

def inputLeftAndRight(sub) {
	state.n = state.n + 1
    if(sub) {
    	state.str = state.str + "("
        state.eval << "("
    }
	inputLeft()
    inputRight()
    if(sub) {
    	state.str = state.str + ")"
        state.eval << ")"
    }
}

def defineRule() {
	dynamicPage(name:"defineRule",title: "Define the Rule", uninstall: false) {
    	state.n = 0
        state.str = ""
        state.eval = []
    	section() {
			inputLeftAndRight(false)
        }
        section() {
        	paragraph("$state.eval")
        }
    }
}

def certainTime() {
	dynamicPage(name:"certainTime",title: "Only during a certain time", uninstall: false) {
		section() {
			input "startingX", "enum", title: "Starting at", options: ["A specific time", "Sunrise", "Sunset"], defaultValue: "A specific time", submitOnChange: true
			if(startingX in [null, "A specific time"]) input "starting", "time", title: "Start time", required: false
			else {
				if(startingX == "Sunrise") input "startSunriseOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false
				else if(startingX == "Sunset") input "startSunsetOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false
			}
		}
		
		section() {
			input "endingX", "enum", title: "Ending at", options: ["A specific time", "Sunrise", "Sunset"], defaultValue: "A specific time", submitOnChange: true
			if(endingX in [null, "A specific time"]) input "ending", "time", title: "End time", required: false
			else {
				if(endingX == "Sunrise") input "endSunriseOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false
				else if(endingX == "Sunset") input "endSunsetOffset", "number", range: "*..*", title: "Offset in minutes (+/-)", required: false
			}
		}
	}
}

def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}

def initialize() {
	// TODO: subscribe to attributes, devices, locations, etc.
}

// TODO: implement event handlers

private conditionLabel() {
	def result = ""
	for (int i = 1; i <= howMany; i++) {
        def thisCapab = settings.find {it.key == "rCapab$i"}
        log.debug "thisCapab = $thisCapab"
        if(thisCapab.value == "Time of day") {
        	result = result + "Time between " + timeIntervalLabel()
        } else if(thisCapab.value == "Days of week") {
        	result = result + "Day i" + (days.size() > 1 ? "n " + days : "s " + days[0])
        } else if (thisCapab.value == "Mode") {
        	result = result + "Mode i" + (modes.size() > 1 ? "n " + modes : "s " + modes[0])
        } else {
        	def thisDev = settings.find {it.key == "rDev$i"}
            def thisAll = settings.find {it.key == "AllrDev$i"}
            def myAny = thisAll ? "any " : ""
        	if(thisCapab.value == "Temperature") result = result + "Temperature of "
            else if(thisCapab.value == "Humidity") result = result + "Humidity of "
            else if(thisCapab.value == "Illuminance") result = result + "Illuminance of "
        	result = result + (myAny ? thisDev.value : thisDev.value[0]) + " " + ((thisAll ? thisAll.value : false) ? "all " : myAny)
            def thisRel = settings.find {it.key == "RelrDev$i"}
            if(thisCapab.value in ["Temperature", "Humidity", "Illuminance"]) result = result + " " + thisRel.value + " "
        	def thisState = settings.find {it.key == "state$i"}
        	result = result + thisState.value
        }
        if((i + 1) <= howMany) result = result + "\n"
    }
    return result
}

private conditionLabelN(i) {
	def result = ""
        def thisCapab = settings.find {it.key == "rCapab$i"}
        log.debug "thisCapab = $thisCapab"
        if(thisCapab.value == "Time of day") {
        	result = result + "Time between " + timeIntervalLabel()
        } else if(thisCapab.value == "Days of week") {
        	result = result + "Day i" + (days.size() > 1 ? "n " + days : "s " + days[0])
        } else if (thisCapab.value == "Mode") {
        	result = result + "Mode i" + (modes.size() > 1 ? "n " + modes : "s " + modes[0])
        } else {
        	def thisDev = settings.find {it.key == "rDev$i"}
            def thisAll = settings.find {it.key == "AllrDev$i"}
            def myAny = thisAll ? "any " : ""
        	if(thisCapab.value == "Temperature") result = result + "Temperature of "
            else if(thisCapab.value == "Humidity") result = result + "Humidity of "
            else if(thisCapab.value == "Illuminance") result = result + "Illuminance of "
        	result = result + (myAny ? thisDev.value : thisDev.value[0]) + " " + ((thisAll ? thisAll.value : false) ? "all " : myAny)
            def thisRel = settings.find {it.key == "RelrDev$i"}
            if(thisCapab.value in ["Temperature", "Humidity", "Illuminance"]) result = result + " " + thisRel.value + " "
        	def thisState = settings.find {it.key == "state$i"}
        	result = result + thisState.value
        }
    return result
}

private offset(value) {
	def result = value ? ((value > 0 ? "+" : "") + value + " min") : ""
}

private timeIntervalLabel() {
	def result = ""
	if (startingX == "Sunrise" && endingX == "Sunrise") result = "Sunrise" + offset(startSunriseOffset) + " and Sunrise" + offset(endSunriseOffset)
	else if (startingX == "Sunrise" && endingX == "Sunset") result = "Sunrise" + offset(startSunriseOffset) + " and Sunset" + offset(endSunsetOffset)
	else if (startingX == "Sunset" && endingX == "Sunrise") result = "Sunset" + offset(startSunsetOffset) + " and Sunrise" + offset(endSunriseOffset)
	else if (startingX == "Sunset" && endingX == "Sunset") result = "Sunset" + offset(startSunsetOffset) + " and Sunset" + offset(endSunsetOffset)
	else if (startingX == "Sunrise" && ending) result = "Sunrise" + offset(startSunriseOffset) + " and " + hhmm(ending, "h:mm a z")
	else if (startingX == "Sunset" && ending) result = "Sunset" + offset(startSunsetOffset) + " and " + hhmm(ending, "h:mm a z")
	else if (starting && endingX == "Sunrise") result = hhmm(starting) + " and Sunrise" + offset(endSunriseOffset)
	else if (starting && endingX == "Sunset") result = hhmm(starting) + " and Sunset" + offset(endSunsetOffset)
	else if (starting && ending) result = hhmm(starting) + " and " + hhmm(ending, "h:mm a z")
}

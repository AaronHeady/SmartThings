/**
 *	Mode Lighting
 *
 *	Author: SmartThings, modified by Bruce Ravenel
 *	Date: 2015-04-19
 */
definition(
    name: "Mode Lighting",
    namespace: "bravenel",
    author: "SmartThings, Bruce Ravenel",
    description: "Set Dimmer Levels Based on Mode",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/MyApps/Cat-MyApps.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/MyApps/Cat-MyApps@2x.png"
)

preferences {
    page(name: "selectDimmers")
    page(name: "otherSettings")
	
	page(name: "timeIntervalInput", title: "Only during a certain time") {
		section {
			input "starting", "time", title: "Starting", required: false
			input "ending", "time", title: "Ending", required: false
		}
	}
}

def selectDimmers() {
	dynamicPage(name: "selectDimmers", title: "First, select your dimmers", nextPage: "otherSettings", uninstall: true) {

		section("When This...") { 
			input "master", "capability.switchLevel", multiple: false, title: "Master Dimmer Is Turned On...", required: true
		}

		section("Then the Master and these Dimmers...") {
			input "dimmers", "capability.switchLevel", multiple: true, title: "Dimmer(s) will be set...", required: false
		}
        
		section("Use these dim levels") {
			input "digits6", "number", title: "Use form DDEENN: ", required: true, description: "DDEENN"
		}
		
		section {
			label title: "Assign a name:", required: false
		}	
	}
}

def otherSettings() {
	dynamicPage(name:"otherSettings", uninstall: false, install: true) {

		section("These switches will be turned off...") {
			input "offSwitches", "capability.switch", title: "These switches off when master off...", multiple: true, required: false
		}
        
		section("Turn on with this button...") {
			input "trigger", "capability.momentary", title: "Button to turn on", multiple: false, required: false
		}
    
		section("Turn them On when there is...") {
			input "motions", "capability.motionSensor", title: "Motion Here", required: false, multiple: true
		}
        
		section("Turn them Off when there is no motion...") {
			input "offMotions", "capability.motionSensor", title: "on these sensors:", required: false, multiple: true
			input "minutes", "number", title: "For this many minutes", required: false, multiple: false
		}
	
		section(title: "Motion options", hidden: hideOptionsSection(), hideable: true) {

			def timeLabel = timeIntervalLabel()

			href "timeIntervalInput", title: "Only during a certain time", description: timeLabel ?: "Tap to set", state: timeLabel ? "complete" : null

			input "days", "enum", title: "Only on certain days of the week", multiple: true, required: false,
				options: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

			input "modes", "mode", title: "Only when mode is", multiple: true, required: false
   		}    
	}
}


def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}


def initialize() {
	subscribe(master, "switch.on", switchOnHandler)
	subscribe(master, "switch.off", switchOffHandler)
	subscribe(master, "level", levelHandler)
	dimmers.each {subscribe(it, "level", levelHandler)}
	subscribe(location, modeChangeHandler)
	subscribe(motions, "motion.active", motionOnHandler)
	subscribe(offMotions, "motion.inactive", motionOffHandler)
	subscribe(trigger, "switch.on", buttonOnHandler)
//	
//	this part converts the 6 digit number into the three dimLevels
//
	def digits4 = digits6 % 10000
	def right2 = digits4 % 100
	def mid2 = digits4 / 100
	def left2 = digits6 / 10000
	state.DayLevel = left2.toInteger()
	state.EveningLevel = mid2.toInteger()
	state.NightLevel = right2
//
	state.currentMode = location.mode
	state.motionOffDismissed = true
	state.masterOff = true
    if(setdimLevel()) if(!state.dimLevel) state.dimLevel = state.DayLevel
}

// change the hardwired modes just below, edit as you need the modes in quotes
boolean setdimLevel(dimLevel) {
	def result = false
	if(dimLevel) state.dimLevel = dimLevel
	else if(location.mode == "Day")     state.dimLevel = state.DayLevel  
	else if(location.mode == "Evening") state.dimLevel = state.EveningLevel
	else if(location.mode == "Night")   state.dimLevel = state.NightLevel
    else result = true
    result
}

def switchesOn(dimLevel) {
	state.motionOffDismissed = true    //we use this variable instead of unschedule() to kill pending off()
	state.masterOff = false            //we track the on/off state of the master dimmer for efficiency
    setdimLevel(dimLevel)
	master.setLevel(state.dimLevel)
	dimmers?.setLevel(state.dimLevel)
}

def switchOnHandler(evt) {
	if(evt.isPhysical()) switchesOn() else state.motionOffDismissed = true
}

def buttonOnHandler(evt) {
	switchesOn()
}

def motionOnHandler(evt) {
	if(state.masterOff && allOk) switchesOn() else state.motionOffDismissed = true
}

def levelHandler(evt) {      // allows a physical dimmer to change the current dimLevel
	if (evt.isDigital() || evt.value == "on" || evt.value == "off") return
	def dimLevel = evt.value.toFloat()
	dimLevel = dimLevel.toInteger()
	switchesOn(dimLevel)
}

def switchesOff() {                    //this is only used by motionOffHandler
	if(state.motionOffDismissed || !allOk) return     //intervening On, kill this Off. Replaces use of unschedule()
	state.masterOff = true
	master.off()
	dimmers?.off()
	offSwitches?.off()
}

def switchOffHandler(evt) {
	state.masterOff = true
	if(evt.isDigital()) return
	if(motions) dimmers?.off() 
	else {    //WARNING: This will fail unless you have custom device type "Dimmer Switch with Reset"
		if(master.currentLevel != state.dimLevel) master.resetLevel(state.dimLevel) 
		dimmers.each {if(it.currentLevel != state.dimLevel) it.resetLevel(state.dimLevel) else it.off()}
	}
	offSwitches?.off()
}

def motionOffHandler(evt) {  // called when motion goes inactive, check all sensors
	if(allOk) {
		def noMotion = true
		offMotions.each {noMotion = noMotion && it.currentValue("motion")=="inactive"}
		if(noMotion) {
			state.motionOffDismissed = false
			if(minutes > 0) runIn(minutes*60,switchesOff)
			else switchesOff()
		}
	}
}

// Must use a custom version of Dimmer Switch device type: "Dimmer Switch with Reset"
// resetLevel() is used to set the level and then immediately turn off the dimmer.
// This device type is REQUIRED for instances of the app with no motion sensors!

def modeChangeHandler(evt) {
	if(state.currentMode == location.mode) return  // if our mode didn't actually change
	if(setdimLevel()) return                       // if not one of our 3 modes
    state.currentMode = location.mode			   // ok, new mode
    
    // the next two lines brighten any lights on when new mode is brighter than previous
    
	if(master.currentSwitch == "on" && master.currentLevel < state.dimLevel) master.setLevel(state.dimLevel)
	dimmers.each {if(it.currentSwitch == "on" && it.currentLevel < state.dimLevel) it.setLevel(state.dimLevel)}

	if(motions) return
    
    // for rooms with no motion, reset the dimLevel IF off
    
	if(master.currentSwitch == "off") master.resetLevel(state.dimLevel)
	dimmers.each {if(it.currentSwitch == "off") it.resetLevel(state.dimLevel)}
}

// execution filter methods
private getAllOk() {
	modeOk && daysOk && timeOk
}

private getModeOk() {
	def result = !modes || modes.contains(location.mode)
//	log.trace "modeOk = $result"
	result
}

private getDaysOk() {
	def result = true
	if (days) {
		def df = new java.text.SimpleDateFormat("EEEE")
		if (location.timeZone) {
			df.setTimeZone(location.timeZone)
		}
		else {
			df.setTimeZone(TimeZone.getTimeZone("America/New_York"))
		}
		def day = df.format(new Date())
		result = days.contains(day)
	}
//	log.trace "daysOk = $result"
	result
}

private getTimeOk() {
	def result = true
	if (starting && ending) {
		def currTime = now()
//		def start = timeToday(starting).time
		def start = timeToday(starting,location.timeZone).time
//		def stop = timeToday(ending).time
		def stop = timeToday(ending,location.timeZone).time
		result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start
	}
//	log.trace "timeOk = $result"
	result
}

private hhmm(time, fmt = "h:mm a")
{
	def t = timeToday(time, location.timeZone)
	def f = new java.text.SimpleDateFormat(fmt)
	f.setTimeZone(location.timeZone ?: timeZone(time))
	f.format(t)
}

private hideOptionsSection() {
	(starting || ending || days || modes) ? false : true
}

private timeIntervalLabel() {
	(starting && ending) ? hhmm(starting) + "-" + hhmm(ending, "h:mm a z") : ""
}

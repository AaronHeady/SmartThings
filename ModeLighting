/**
 *	Mode Lighting
 *
 *	Author: SmartThings, modified by Bruce Ravenel
 *	Date: 2015-01-19
 */
definition(
    name: "Mode Lighting",
    namespace: "",
    author: "SmartThings, Bruce Ravenel",
    description: "Set Dimmer Levels Based on Mode",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/MyApps/Cat-MyApps.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/MyApps/Cat-MyApps@2x.png"
)

/**
    This app is hardwired for 3 modes named Day, Evening, and Night (which could be changed).
    The dim levels for the 3 are entered as a single 6 digit number, e.g. 903010,
    which would give 90 for Day, 30 for Evening, and 10 for Night.
    The app also allows you to specify additional dimmers that are turned off
    when the master dimmer is turned off.  The app has similar functionality to 
    Dim and Dimmer, in that there is a master dimmer and some slave dimmers. The
    idea for that is that sometimes the master dimmer physical switch is used to
    turn on the lights -- the slaves follow, or likewise to turn off some lights.  That's
    how I use it, for a master off for an entire area, encompassing more than would be turned on.
    
    If motion sensors(s) are specified they turn on the master and all slaves to the 
    current mode's dimmer level.  I use "Turn off when there is no motion" from Lights &
    Switches to turn things off after some amount of time.  The motion activation can
    be conditioned on time of day, days of week, or mode.
    
    The app adjusts dimmer levels on each mode change to one of the three hardwired modes.
    A mode change to some other mode has no effect on the dimmer levels, which allows for
    extra modes that can be used to disable motion entirely at times.  If an instance of
    the app has motion activation, at mode change those lights will be adjusted if they are on.
    If an instance does not have motion activation, it will also adjust those levels if the
    lights are on.  However, if the lights are off at mode change, the app will adjust their
    dimmer levels and then immediately turn them back off.  This is so that the next time
    the lights are turned on using the physical switch, they come on to the right level.  
    Without this feature, the light would come on to its previous dimmer level, and then
    adjust the level once ST sees the lights-on event.  This can be a number of seconds 
    after the physical switch is pressed.  What you don't want is for someone to go into
    the bathroom in the middle of the night, turn on a switch, and have the light come on
    bright for a few seconds before it dims to the correct level.
    
    There is one more feature of this app that has to do with someone manually changing the
    dimmer level.  For example, in the evening, a woman wants to put on makeup and the light
    isn't bright enough.  She turns up the dimmer.  That event is responded to by temporarily
    adjusting the dimmer level for both master and slaves to that new level.  Once the light is turned off, 
    the dimmer levels will be restored to their specified settings.  Without this feature, she could 
    brighten the lights only to have the app put them right back where they were before.
 */

preferences {
    page(name: "selectDimmers")
    page(name: "otherSettings")
	
	page(name: "timeIntervalInput", title: "Only during a certain time") {
		section {
			input "starting", "time", title: "Starting", required: false
			input "ending", "time", title: "Ending", required: false
		}
	}
}

def otherSettings() {
	dynamicPage(name:"otherSettings", uninstall: false, install: true) {

		section("And these will also be turned off with it") {
            input "offDimmers", "capability.switchLevel",
        	multiple: true,
       		title: "These dimmers off when master off...",
        	required: false
    	}
        
        section("Turn on as motion with this button") {
        input "trigger", "capability.momentary", title: "Button to turn on as motion", multiple: false, required: false
        }
    
    	section("Turn them On when there is...") {
    		input "motions", "capability.motionSensor", title: "Motion Here", required: false, multiple: true
    	}
	
	section(title: "Motion options", hidden: hideOptionsSection(), hideable: true) {

		def timeLabel = timeIntervalLabel()

		href "timeIntervalInput", title: "Only during a certain time", description: timeLabel ?: "Tap to set", state: timeLabel ? "complete" : null

		input "days", "enum", title: "Only on certain days of the week", multiple: true, required: false,
			options: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

		input "modes", "mode", title: "Only when mode is", multiple: true, required: false
   		}    
	}
}

def selectDimmers() {
	dynamicPage(name: "selectDimmers", title: "First, select your dimmers", nextPage: "otherSettings", uninstall: true) {

		section("When This...") { 
			input "master", "capability.switchLevel", 
				multiple: false, 
				title: "Master Dimmer Is Turned On...", 
				required: true
		}

    		section("Then the Master and these Dimmers...") {
			input "dimmers", "capability.switchLevel", 
				multiple: true, 
				title: "Dimmer(s) will be set...", 
				required: false
		}
        
        	section("Use these dim levels") {
            		input "digits6", "number", 
            		title: "Use form DDEENN: ",
            		required: true
        	}
		
        	section {
        		label title: "Assign a name:", required: false
        	}	
	}
}


def installed() {
	initialize()
}

def updated() {
	unsubscribe()
	initialize()
}

def initialize() {
    subscribe(master, "switch.on", switchOnHandler)
    subscribe(master, "switch.off", switchOffHandler)
    subscribe(master, "switch.setLevel", setLevelHandler)
    subscribe(master, "level", setLevelHandler)
    subscribe(master, "switch", setLevelHandler)
    def i = 0
    for(myDimmer in dimmers) {  //so that adjusting any dimmer does them all
    	subscribe(dimmers[i], "switch.setLevel", setLevelHandler)
    	subscribe(dimmers[i], "level", setLevelHandler) // I haven't figured out if I need both "level" 
    	subscribe(dimmers[i], "switch", setLevelHandler)// and "switch"
        i++
    }
    subscribe(location, modeChangeHandler)
    subscribe(motions, "motion.active", motionOnHandler)
    subscribe(trigger, "switch.on", motionOnHandler)
    def digits4 = digits6 % 10000
    def right2 = digits4 % 100
    def mid2 = digits4 / 100
    def left2 = digits6 / 10000
    state.DayLevel = left2.toInteger()
    state.EveningLevel = mid2.toInteger()
    state.NightLevel = right2
    if     (location.mode == "Day") state.lastdimLevel = state.DayLevel  
    else if(location.mode == "Evening") state.lastdimLevel = state.EveningLevel
    else if(location.mode == "Night") state.lastdimLevel = state.NightLevel
    state.switchEnable = true
}

def switchOnHandler(evt) {
    if(state.switchEnable) { //this is so we can disable switchOn during mode change
    	def dimLevel = state.lastdimLevel
		if     (location.mode == "Day") dimLevel = state.DayLevel  
 		else if(location.mode == "Evening") dimLevel = state.EveningLevel
		else if(location.mode == "Night") dimLevel = state.NightLevel
		master.setLevel(dimLevel)
    	dimmers?.setLevel(dimLevel)
    	state.lastdimLevel = dimLevel
    }
}

def switchOnHandlerDimmer(evt) {
	if(state.switchEnable) return
    for(mySwitch in dimmers) {
    	if(evt.linkText == mySwitch.toString()) mySwitch.off()
    }
}

def reEnableSwitch() { // finished with mode change, so re-enable switch.On
	state.switchEnable = true
}

def motionOnHandler(evt) {
    if(allOk) {
    	def dimLevel = state.lastdimLevel  //could be the lights are already on, and have been adjusted, so accept that
//	this change below is so that levels don't change once the light is on, only after its off next time on (ditto below)
//    	if((master.currentValue("switch") == "off") || (master.currentValue("level") != dimLevel)) master.setLevel(dimLevel)
    	if(master.currentValue("switch") == "off") master.setLevel(dimLevel)
    	def i = 0
		for(mySwitch in dimmers) {
//	    	if((mySwitch.currentValue("switch") == "off") || (mySwitch.currentValue("level") != dimlevel)) dimmers[i].setLevel(dimLevel)
	    	if(mySwitch.currentValue("switch") == "off") dimmers[i].setLevel(dimLevel)
 	   		i++	
 		}    
    }
}

def switchOffHandler(evt) {
    master.off()
    dimmers?.off()
    offDimmers?.off()
    if     (location.mode == "Day") state.lastdimLevel = state.DayLevel  //this to undo manual dimLevel change
    else if(location.mode == "Evening") state.lastdimLevel = state.EveningLevel
    else if(location.mode == "Night") state.lastdimLevel = state.NightLevel
}

def setLevelHandler(evt) {
    if ((evt.value == "on") || (evt.value == "off" || !state.switchEnable)) return
    def dimLevel = evt.value.toFloat()
    dimLevel = dimLevel.toInteger()
    state.lastdimLevel = dimLevel  //so "on" from motion doesn't reset level later
    master.setLevel(dimLevel)
    dimmers?.setLevel(dimLevel)
}

def modeChangeHandler(evt) {
    if     (location.mode == "Day") state.lastdimLevel = state.DayLevel  
    else if(location.mode == "Evening") state.lastdimLevel = state.EveningLevel
    else if(location.mode == "Night") state.lastdimLevel = state.NightLevel
    else return
    def dimLevel = state.lastdimLevel
    def i = 0
    def myStr = ""
    if(motions){  // we won't bother with lights that are off, because motion-on will set the level
//	the code below was for changing dimlevels while on at mode change
//		if(master.currentValue("switch") == "on") master.setLevel(dimLevel)
//		for(mySwitch in dimmers) {
//	    	if(mySwitch.currentValue("switch") == "on") dimmers[i].setLevel(dimLevel)
// 	    	i++	
// 		}
    } else {  // no motion, so physical switches (or minimotes) are in use
    	def wasOff = master.currentValue("switch") == "off"
        def wasntRunIn = true
		master.setLevel(dimLevel)
		if(wasOff) {
            master.off()
            myStr = master
    	    state.switchEnable = false
            runIn(61,reEnableSwitch)  //disable the physical switch for 61 seconds
            wasntRunIn = false		  //so if the device type throws an On it will be ignored
        }
		for(mySwitch in dimmers) {
    		wasOff = mySwitch.currentValue("switch") == "off"
			dimmers[i].setLevel(dimLevel)
        	if(wasOff) {
                dimmers[i].off()
                myStr = dimmers[i]
    			state.switchEnable = false
            	if(wasntRunIn) {   	//so we only do the runIn once
        	    	runIn(61,reEnableSwitch)
                	wasntRunIn = false
            	}
        	}
 	    	i++	
 		}
    }
}

// execution filter methods
private getAllOk() {
	modeOk && daysOk && timeOk
}

private getModeOk() {
	def result = !modes || modes.contains(location.mode)
//	log.trace "modeOk = $result"
	result
}

private getDaysOk() {
	def result = true
	if (days) {
		def df = new java.text.SimpleDateFormat("EEEE")
		if (location.timeZone) {
			df.setTimeZone(location.timeZone)
		}
		else {
			df.setTimeZone(TimeZone.getTimeZone("America/New_York"))
		}
		def day = df.format(new Date())
		result = days.contains(day)
	}
//	log.trace "daysOk = $result"
	result
}

private getTimeOk() {
	def result = true
	if (starting && ending) {
		def currTime = now()
		def start = timeToday(starting).time
		def stop = timeToday(ending).time
		result = start < stop ? currTime >= start && currTime <= stop : currTime <= stop || currTime >= start
	}
//	log.trace "timeOk = $result"
	result
}

private hhmm(time, fmt = "h:mm a")
{
	def t = timeToday(time, location.timeZone)
	def f = new java.text.SimpleDateFormat(fmt)
	f.setTimeZone(location.timeZone ?: timeZone(time))
	f.format(t)
}

private hideOptionsSection() {
	(starting || ending || days || modes) ? false : true
}

private timeIntervalLabel() {
	(starting && ending) ? hhmm(starting) + "-" + hhmm(ending, "h:mm a z") : ""
}
